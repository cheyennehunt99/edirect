{"version":3,"sources":["components/Wrapper/index.js","components/Head/index.js","pages/api.js","pages/DataAreaContext.js","components/Search/index.js","components/NavBar/index.js","components/DataCard/index.js","components/DataBody/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","children","className","Head","axios","get","DataAreaContext","React","createContext","Search","context","useContext","DataContext","type","placeholder","onChange","e","handleSearchChange","target","value","Nav","change","DataCard","props","name","style","width","src","picture","large","alt","first","last","gender","email","phone","location","city","state","dob","age","DataBody","useState","users","setUsers","filteredUsers","setFilteredUsers","sortedUsers","setSortedUsers","activeUser","setActiveUser","inc","setInc","sortAge","setSortAge","useEffect","API","then","results","data","console","log","newResults","map","a","handleSort","key","sorted","sort","b","Provider","val","filtered","filter","user","toLowerCase","includes","onClick","margin","scope","i","thumbnail","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a3faea14.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Wrapper ({ children }){\r\n    return (\r\n        <div className=\"wrapper\">\r\n            { children }\r\n        </div>\r\n    );\r\n};\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.module.css\";\r\n\r\nfunction Head (){\r\n    return (\r\n        <div className=\"head\">\r\n            <h1>Employee Directory</h1>\r\n            <h3>Filter or Search for Result</h3>\r\n        </div>\r\n    );\r\n};\r\nexport default Head;","import axios from \"axios\";\r\n\r\nexport default{ \r\n    getUsers:function(){    \r\n\r\n        return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n    }\r\n};","import React from \"react\";\r\n\r\nconst DataAreaContext = React.createContext({\r\n\r\n});\r\n\r\nexport default DataAreaContext;","import React, { useContext } from \"react\";\r\nimport DataContext from \"../../pages/DataAreaContext\";\r\n\r\nfunction Search (){\r\n    const context = useContext(DataContext);\r\n    return (\r\n        <div className=\"searchname\">\r\n            <form className=\"form-inline\">\r\n                <input\r\n                    type=\"search\"\r\n                    placeholder=\"Search\"\r\n                    onChange={e=> context.handleSearchChange(e.target.value)}\r\n                    />\r\n                <button className=\"btn\" type=\"submit\">\r\n                Search\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\nexport default Search;","import React from \"react\";\r\nimport Search from \"../Search/index\";\r\n\r\nfunction Nav ({change}){\r\n    return (\r\n        <nav>\r\n            <div className=\"search-area\">\r\n                <Search change={change}/>\r\n            </div>\r\n        </nav>\r\n    );\r\n};\r\nexport default Nav;","import React from \"react\";\r\n\r\nfunction DataCard(props) {\r\n    return (\r\n    props.name ? <div className=\"card\" style={{width: \"18rem\"}}>\r\n  <img src={props.picture?.large} className=\"card-img-top\" alt=\"...\"/>\r\n  <div className=\"card-body\">\r\n    <h5 className=\"card-title\">{props.name.first} {props.name.last}</h5>\r\n  </div>\r\n  <ul className=\"list-group list-group-flush\">\r\n    <li className=\"list-group-item\">Gender: {props.gender}</li>\r\n    <li className=\"list-group-item\">Email: {props.email}</li>\r\n    <li className=\"list-group-item\">Phone: {props.phone}</li>\r\n    <li className=\"list-group-item\">Location: {props.location.city}, {props.location.state}</li>\r\n    <li className=\"list-group-item\">Age: {props.dob.age}</li>\r\n  </ul>\r\n</div> : \"\"\r\n\r\n    )\r\n};\r\nexport default DataCard;","import React, { useState, useEffect } from \"react\";\r\nimport API from \"../../pages/api\";\r\nimport DataAreaContext from \"../../pages/DataAreaContext\";\r\nimport Nav from \"../NavBar/index\";\r\nimport DataCard from '../DataCard';\r\n\r\nfunction DataBody() {\r\n    const [users, setUsers] = useState([]);\r\n    const [filteredUsers, setFilteredUsers] = useState([]);\r\n    const [sortedUsers, setSortedUsers] = useState({users:[]});\r\n    const [activeUser, setActiveUser] = useState(null);\r\n    const [inc, setInc] = useState(1);\r\n    const [sortAge, setSortAge] = useState(false);\r\n    const handleSearchChange = val => {\r\n       \r\n        const filtered = users.filter(user => user.first.toLowerCase().includes(val) || user.last.toLowerCase().includes(val));\r\n        setFilteredUsers(filtered);\r\n        setSortedUsers({users:filtered})\r\n    }\r\n    useEffect(() => {\r\n        API.getUsers()\r\n            .then(({ data: { results } }) => {\r\n                console.log(results[0])\r\n                const newResults = results.map(a => ({...a,first:a.name.first, last:a.name.last}))\r\n                setFilteredUsers(newResults);\r\n                setUsers(newResults);\r\n                setSortedUsers({users:newResults})\r\n            })\r\n    }, [])\r\n    const handleSort = key => {\r\n        const sorted = filteredUsers.sort((a,b)=> a[key] < b[key] ? -1*inc : a[key] > b[key] ? 1*inc : 0);\r\n        setInc(-inc);\r\n        setSortedUsers({users:sorted})\r\n    }\r\n    const filterEmployees = () => {\r\n        let sorted;\r\n        if (sortAge){\r\n            sorted = filteredUsers.sort((a,b)=> a.dob.age - b.dob.age)\r\n        }\r\n        else {\r\n            sorted = filteredUsers.sort((a,b)=> b.dob.age - a.dob.age)\r\n\r\n        }\r\n        setSortAge(!sortAge)\r\n        setSortedUsers({users:sorted})\r\n    }\r\n    return (\r\n        <DataAreaContext.Provider value={{ handleSearchChange }}>\r\n            <Nav />\r\n            <button className=\"btn\" type=\"button\" onClick = {filterEmployees}>\r\n                Filter By Age\r\n                </button>\r\n            <div className=\"row\">\r\n                <div className=\"col-6\">\r\n                    <table className=\"table table-striped\" style={{margin:\"auto\"}}>\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Image</th>\r\n                                <th onClick={()=>handleSort(\"first\")} scope=\"col\">First</th>\r\n                                <th onClick={()=>handleSort(\"last\")} scope=\"col\">Last</th>\r\n                                <th onClick={()=>handleSort(\"email\")} scope=\"col\">Email</th>\r\n                                <th onClick={()=>handleSort(\"phone\")} scope=\"col\">Phone</th>\r\n                                <th onClick={()=>handleSort(\"age\")} scope=\"col\">Age</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {sortedUsers.users.map((a, i) => {\r\n                                return <tr onClick={() => setActiveUser(i)}>\r\n                                    <td><img src={a.picture.thumbnail} alt=\"employee\"/></td>\r\n                                    <td>{a.first}</td>\r\n                                    <td>{a.last}</td>\r\n                                    <td>{a.email}</td>\r\n                                    <td>{a.phone}</td>\r\n                                    <td>{a.dob.age}</td>\r\n\r\n                                </tr>\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"col-6\">\r\n                    <DataCard {...filteredUsers[activeUser]} />\r\n                </div>\r\n            </div>\r\n        </DataAreaContext.Provider>\r\n    )\r\n};\r\nexport default DataBody;\r\n","import React from 'react';\nimport './App.css';\nimport Wrapper from './components/Wrapper/index.js';\nimport Head from './components/Head/index.js';\nimport Main from './components/DataBody/index.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wrapper>\n      <Head />\n      <Main />\n      </Wrapper>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}